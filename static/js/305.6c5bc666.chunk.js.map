{"version":3,"file":"static/js/305.6c5bc666.chunk.js","mappings":"sMAuDA,SAASA,EAAT,GAAyC,IAAD,IAAnBC,KAAAA,OAAmB,MAAZ,SAAY,EAC9BC,GAAYC,EAAAA,EAAAA,MAAZD,QACAE,GAASC,EAAAA,EAAAA,IAAOC,EAAAA,GAAAA,aAAqBJ,EAASD,GAAOM,EAAAA,IAArDH,KACR,IAAKA,EAAM,OAAO,KAClB,GAAa,YAATH,EAAoB,CACtB,IAAQO,EAASJ,EAATI,KACR,OAAKA,GAAQA,EAAKC,QAAU,EAAU,MAGpC,iBAAKC,UAAU,QAAf,WACE,eAAIA,UAAU,6BAAd,oBACA,gBAAKA,UAAU,yBAAf,SACGF,EAAKG,MAAM,EAAG,GAAGC,KAAI,SAACC,GAAD,OACpB,iBAAKH,UAAU,YAAf,WACE,gBACEI,IAAKR,EAAAA,GAAAA,cAAsBO,EAAKE,cAChCL,UAAU,gDACVM,IAAI,MAEN,eAAIN,UAAU,sBAAd,SAAqCG,EAAKI,SANZJ,EAAKK,YAa7C,IAAQC,EAAYf,EAAZe,QACR,OAAKA,GAAWA,EAAQV,QAAU,EAAU,KAC/B,WAATR,GAEA,gBAAKS,UAAU,QAAf,UACE,gBAAKA,UAAU,uBAAf,SACGS,EAAQR,MAAM,EAAG,GAAGC,KAAI,SAACC,GAAD,OACvB,iBAAKH,UAAU,GAAf,WACE,eAAIA,UAAU,yDAAd,SACGG,EAAKI,QAER,gBAAmBP,UAAU,sBAA7B,UACE,mBACEU,MAAM,MACNC,OAAO,MACPP,IAAG,wCAAmCD,EAAKS,KAC3CC,MAAM,uBACNC,YAAY,IACZC,MAAM,2FACNC,iBAAe,EACfhB,UAAU,+BATJG,EAAKK,MAJML,EAAKK,WAqBzB,YAATjB,GAEA,iBAAKS,UAAU,QAAf,WACE,eAAIA,UAAU,6BAAd,6BACA,gBAAKA,UAAU,aAAf,UACE,SAAC,KAAD,CACEiB,WAAY,OACZC,aAAc,GACdC,cAAe,OAHjB,SAKGV,EAAQV,OAAS,GAChBU,EAAQP,KAAI,SAACC,GAAD,OACV,SAAC,KAAD,WACE,SAAC,IAAD,CAAWA,KAAMA,KADDA,EAAKK,cAShC,KAoFT,UAhNyB,WACvB,IAAQhB,GAAYC,EAAAA,EAAAA,MAAZD,QACAE,GAASC,EAAAA,EAAAA,IAAOC,EAAAA,GAAAA,gBAAwBJ,GAAUK,EAAAA,IAAlDH,KACR,IAAKA,EAAM,OAAO,KAClB,IAAQ0B,EAAwD1B,EAAxD0B,cAAeC,EAAyC3B,EAAzC2B,YAAaR,EAA4BnB,EAA5BmB,MAAOS,EAAqB5B,EAArB4B,OAAQC,EAAa7B,EAAb6B,SAEnD,OACE,iBAAKvB,UAAU,QAAf,WACE,iBAAKA,UAAU,4BAAf,WACE,gBAAKA,UAAU,6CACf,gBACEA,UAAU,sCACVwB,MAAO,CACLC,gBAAgB,OAAD,OAAS7B,EAAAA,GAAAA,cAAsBwB,GAA/B,YAIrB,gBAAKpB,UAAU,yEAAf,UACE,gBACEI,IAAKR,EAAAA,GAAAA,cAAsByB,GAC3BrB,UAAU,wCACVM,IAAI,QAGR,eAAIN,UAAU,kDAAd,SACGa,IAEFS,EAAOvB,OAAS,IACf,gBAAKC,UAAU,iDAAf,SACGsB,EAAOpB,KAAI,SAACC,GAAD,OACV,iBACEH,UAAU,uDADZ,SAIGG,EAAKI,MAFDJ,EAAKK,UAOlB,cAAGR,UAAU,0DAAb,SACGuB,KAEH,SAACjC,EAAD,CAAWC,KAAK,aAChB,SAACD,EAAD,CAAWC,KAAK,YAChB,SAACD,EAAD,CAAWC,KAAK","sources":["pages/MovieDetailsPage.js"],"sourcesContent":["import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { SwiperSlide, Swiper } from \"swiper/react\";\nimport useSWR from \"swr\";\nimport MovieCard from \"components/movie/MovieCard\";\nimport { fetcher, tmdbAPI } from \"apiConfig/config\";\nconst MovieDetailsPage = () => {\n  const { movieId } = useParams();\n  const { data } = useSWR(tmdbAPI.getMovieDetails(movieId), fetcher);\n  if (!data) return null;\n  const { backdrop_path, poster_path, title, genres, overview } = data;\n\n  return (\n    <div className=\"py-10\">\n      <div className=\"w-full h-[600px] relative\">\n        <div className=\"absolute inset-0 bg-black bg-opacity-70\"></div>\n        <div\n          className=\"w-full h-full bg-cover bg-no-repeat\"\n          style={{\n            backgroundImage: `url(${tmdbAPI.imageOriginal(backdrop_path)})`,\n          }}\n        ></div>\n      </div>\n      <div className=\"w-full h-[400px] max-w-[800px] mx-auto -mt-[200px] relative z-10 pb-10\">\n        <img\n          src={tmdbAPI.imageOriginal(poster_path)}\n          className=\"w-full h-full object-cover rounded-xl\"\n          alt=\"\"\n        />\n      </div>\n      <h1 className=\"text-center text-4xl font-bold text-white mb-10\">\n        {title}\n      </h1>\n      {genres.length > 0 && (\n        <div className=\"flex items-center justify-center gap-x-5 mb-10\">\n          {genres.map((item) => (\n            <span\n              className=\"py-2 px-4 border-primary text-primary border rounded\"\n              key={item.id}\n            >\n              {item.name}\n            </span>\n          ))}\n        </div>\n      )}\n      <p className=\"text-center leading-relaxed max-w-[600px] mx-auto mb-10\">\n        {overview}\n      </p>\n      <MovieMeta type=\"credits\"></MovieMeta>\n      <MovieMeta type=\"videos\"></MovieMeta>\n      <MovieMeta type=\"similar\"></MovieMeta>\n    </div>\n  );\n};\n\nfunction MovieMeta({ type = \"videos\" }) {\n  const { movieId } = useParams();\n  const { data } = useSWR(tmdbAPI.getMovieMeta(movieId, type), fetcher);\n  if (!data) return null;\n  if (type === \"credits\") {\n    const { cast } = data;\n    if (!cast || cast.length <= 0) return null;\n\n    return (\n      <div className=\"py-10\">\n        <h2 className=\"text-center text-3xl mb-10\">Casts</h2>\n        <div className=\"grid grid-cols-4 gap-5\">\n          {cast.slice(0, 4).map((item) => (\n            <div className=\"cast-item\" key={item.id}>\n              <img\n                src={tmdbAPI.imageOriginal(item.profile_path)}\n                className=\"w-full h-[350px] object-cover rounded-lg mb-3\"\n                alt=\"\"\n              />\n              <h3 className=\"text-xl font-medium\">{item.name}</h3>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  } else {\n    const { results } = data;\n    if (!results || results.length <= 0) return null;\n    if (type === \"videos\")\n      return (\n        <div className=\"py-10\">\n          <div className=\"flex flex-col gap-10\">\n            {results.slice(0, 2).map((item) => (\n              <div className=\"\" key={item.id}>\n                <h3 className=\"mb-5 text-xl font-medium p-3 bg-secondary inline-block\">\n                  {item.name}\n                </h3>\n                <div key={item.id} className=\"w-full aspect-video\">\n                  <iframe\n                    width=\"864\"\n                    height=\"486\"\n                    src={`https://www.youtube.com/embed/${item.key}`}\n                    title=\"YouTube video player\"\n                    frameBorder=\"0\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                    allowFullScreen\n                    className=\"w-full h-full object-fill\"\n                  ></iframe>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    if (type === \"similar\")\n      return (\n        <div className=\"py-10\">\n          <h2 className=\"text-3xl font-medium mb-10\">Similar movies</h2>\n          <div className=\"movie-list\">\n            <Swiper\n              grabCursor={\"true\"}\n              spaceBetween={40}\n              slidesPerView={\"auto\"}\n            >\n              {results.length > 0 &&\n                results.map((item) => (\n                  <SwiperSlide key={item.id}>\n                    <MovieCard item={item}></MovieCard>\n                  </SwiperSlide>\n                ))}\n            </Swiper>\n          </div>\n        </div>\n      );\n  }\n  return null;\n}\n\nfunction MovieCredits() {\n  const { movieId } = useParams();\n  const { data } = useSWR(tmdbAPI.getMovieMeta(movieId, \"credits\"), fetcher);\n  if (!data) return null;\n  const { cast } = data;\n  if (!cast || cast.length <= 0) return null;\n  return (\n    <div className=\"py-10\">\n      <h2 className=\"text-center text-3xl mb-10\">Casts</h2>\n      <div className=\"grid grid-cols-4 gap-5\">\n        {cast.slice(0, 4).map((item) => (\n          <div className=\"cast-item\" key={item.id}>\n            <img\n              src={tmdbAPI.imageOriginal(item.profile_path)}\n              className=\"w-full h-[350px] object-cover rounded-lg mb-3\"\n              alt=\"\"\n            />\n            <h3 className=\"text-xl font-medium\">{item.name}</h3>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction MovieVideos() {\n  const { movieId } = useParams();\n  const { data } = useSWR(tmdbAPI.getMovieMeta(movieId, \"videos\"), fetcher);\n  if (!data) return null;\n  const { results } = data;\n  if (!results || results.length <= 0) return null;\n  return (\n    <div className=\"py-10\">\n      <div className=\"flex flex-col gap-10\">\n        {results.slice(0, 2).map((item) => (\n          <div className=\"\" key={item.id}>\n            <h3 className=\"mb-5 text-xl font-medium p-3 bg-secondary inline-block\">\n              {item.name}\n            </h3>\n            <div key={item.id} className=\"w-full aspect-video\">\n              <iframe\n                width=\"864\"\n                height=\"486\"\n                src={`https://www.youtube.com/embed/${item.key}`}\n                title=\"YouTube video player\"\n                frameBorder=\"0\"\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                allowFullScreen\n                className=\"w-full h-full object-fill\"\n              ></iframe>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nfunction MovieSimilar() {\n  const { movieId } = useParams();\n  const { data } = useSWR(tmdbAPI.getMovieMeta(movieId, \"similar\"), fetcher);\n  if (!data) return null;\n  const { results } = data;\n  if (!results || results.length <= 0) return null;\n  return (\n    <div className=\"py-10\">\n      <h2 className=\"text-3xl font-medium mb-10\">Similar movies</h2>\n      <div className=\"movie-list\">\n        <Swiper grabCursor={\"true\"} spaceBetween={40} slidesPerView={\"auto\"}>\n          {results.length > 0 &&\n            results.map((item) => (\n              <SwiperSlide key={item.id}>\n                <MovieCard item={item}></MovieCard>\n              </SwiperSlide>\n            ))}\n        </Swiper>\n      </div>\n    </div>\n  );\n}\n\nexport default MovieDetailsPage;\n"],"names":["MovieMeta","type","movieId","useParams","data","useSWR","tmdbAPI","fetcher","cast","length","className","slice","map","item","src","profile_path","alt","name","id","results","width","height","key","title","frameBorder","allow","allowFullScreen","grabCursor","spaceBetween","slidesPerView","backdrop_path","poster_path","genres","overview","style","backgroundImage"],"sourceRoot":""}